#!/usr/bin/env python3
"""
live letter replacer
Logs every problem to log  in the same folder.
Pause/Break  toggles ON/OFF.  Ctrl-C  quits.
"""
import pathlib, traceback, sys, os, time, threading
LOG_FILE = pathlib.Path(__file__).with_suffix(".log")

# ------------------------------------------------------------------------------- #
# 1.  Tables – add more if needed                                                 #
# ------------------------------------------------------------------------------- #
MASTER = {
    "bold": {
        'a':'𝐚','b':'𝐛','c':'𝐜','d':'𝐝','e':'𝐞','f':'𝐟','g':'𝐠','h':'𝐡','i':'𝐢',
        'j':'𝐣','k':'𝐤','l':'𝐥','m':'𝐦','n':'𝐧','o':'𝐨','p':'𝐩','q':'𝐪','r':'𝐫',
        's':'𝐬','t':'𝐭','u':'𝐮','v':'𝐯','w':'𝐰','x':'𝐱','y':'𝐲','z':'𝐳',
        'A':'𝐀','B':'𝐁','C':'𝐂','D':'𝐃','E':'𝐄','F':'𝐅','G':'𝐆','H':'𝐇','I':'𝐈',
        'J':'𝐉','K':'𝐊','L':'𝐋','M':'𝐌','N':'𝐍','O':'𝐎','P':'𝐏','Q':'𝐐','R':'𝐑',
        'S':'𝐒','T':'𝐓','U':'𝐔','V':'𝐕','W':'𝐖','X':'𝐗','Y':'𝐘','Z':'𝐙'
    },
"sans": {
        'a':'𝗮',
        'b':'𝗯',
        'c':'𝗰',
        'd':'𝗱',
        'e':'𝗲',
        'f':'𝗳',
        'g':'𝗴',
        'h':'𝗵',
        'i':'𝗶',
        'j':'𝗷',
        'k':'𝗸',
        'l':'𝗹',
        'm':'𝗺',
        'n':'𝗻',
        'o':'𝗼',
        'p':'𝗽',
        'q':'𝗾',
        'r':'𝗿',
        's':'𝘀',
        't':'𝘁',
        'u':'𝘂',
        'v':'𝘃',
        'w':'𝘄',
        'x':'𝘅',
        'y':'𝘆',
        'z':'𝘇',
        'A':'𝗔',
        'B':'𝗕',
        'C':'𝗖',
        'D':'𝗗',
        'E':'𝗘',
        'F':'𝗙',
        'G':'𝗚',
        'H':'𝗛',
        'I':'𝗜',
        'J':'𝗝',
        'K':'𝗞',
        'L':'𝗟',
        'M':'𝗠',
        'N':'𝗡',
        'O':'𝗢',
        'P':'𝗣',
        'Q':'𝗤',
        'R':'𝗥',
        'S':'𝗦',
        'T':'𝗧',
        'U':'𝗨',
        'V':'𝗩',
        'W':'𝗪',
        'X':'𝗫',
        'Y':'𝗬',
        'Z':'𝗭'
    },
    "box": {
        'a':'🄰',
        'b':'🄱',
        'c':'🄲',
        'd':'🄳',
        'e':'🄴',
        'f':'🄵',
        'g':'🄶',
        'h':'🄷',
        'i':'🄸',
        'j':'🄹',
        'k':'🄺',
        'l':'🄻',
        'm':'🄼',
        'n':'🄽',
        'o':'🄾',
        'p':'🄿',
        'q':'🅀',
        'r':'🅁',
        's':'🅂',
        't':'🅃',
        'u':'🅄',
        'v':'🅅',
        'w':'🅆',
        'x':'🅇',
        'y':'🅈',
        'z':'🅉',
        'A':'🄰',
        'B':'🄱',
        'C':'🄲',
        'D':'🄳',
        'E':'🄴',
        'F':'🄵',
        'G':'🄶',
        'H':'🄷',
        'I':'🄸',
        'J':'🄹',
        'K':'🄺',
        'L':'🄻',
        'M':'🄼',
        'N':'🄽',
        'O':'🄾',
        'P':'🄿',
        'Q':'🅀',
        'R':'🅁',
        'S':'🅂',
        'T':'🅃',
        'U':'🅄',
        'V':'🅅',
        'W':'🅆',
        'X':'🅇',
        'Y':'🅈',
        'Z':'🅉'
    },
    "square": {
        'a':'🅰',
        'b':'🅱',
        'c':'🅲',
        'd':'🅳',
        'e':'🅴',
        'f':'🅵',
        'g':'🅶',
        'h':'🅷',
        'i':'🅸',
        'j':'🅹',
        'k':'🅺',
        'l':'🅻',
        'm':'🅼',
        'n':'🅽',
        'o':'🅾',
        'p':'🅿',
        'q':'🆀',
        'r':'🆁',
        's':'🆂',
        't':'🆃',
        'u':'🆄',
        'v':'🆅',
        'w':'🆆',
        'x':'🆇',
        'y':'🆈',
        'z':'🆉',
        'A':'🅰',
        'B':'🅱',
        'C':'🅲',
        'D':'🅳',
        'E':'🅴',
        'F':'🅵',
        'G':'🅶',
        'H':'🅷',
        'I':'🅸',
        'J':'🅹',
        'K':'🅺',
        'L':'🅻',
        'M':'🅼',
        'N':'🅽',
        'O':'🅾',
        'P':'🅿',
        'Q':'🆀',
        'R':'🆁',
        'S':'🆂',
        'T':'🆃',
        'U':'🆄',
        'V':'🆅',
        'W':'🆆',
        'X':'🆇',
        'Y':'🆈',
        'Z':'🆉'
    },
    "circle": {
        'a':'ⓐ',
        'b':'ⓑ',
        'c':'ⓒ',
        'd':'ⓓ',
        'e':'ⓔ',
        'f':'ⓕ',
        'g':'ⓖ',
        'h':'ⓗ',
        'i':'ⓘ',
        'j':'ⓙ',
        'k':'ⓚ',
        'l':'ⓛ',
        'm':'ⓜ',
        'n':'ⓝ',
        'o':'ⓞ',
        'p':'ⓟ',
        'q':'ⓠ',
        'r':'ⓡ',
        's':'ⓢ',
        't':'ⓣ',
        'u':'ⓤ',
        'v':'ⓥ',
        'w':'ⓦ',
        'x':'ⓧ',
        'y':'ⓨ',
        'z':'ⓩ',
        'A':'Ⓐ',
        'B':'Ⓑ',
        'C':'Ⓒ',
        'D':'Ⓓ',
        'E':'Ⓔ',
        'F':'Ⓕ',
        'G':'Ⓖ',
        'H':'Ⓗ',
        'I':'Ⓘ',
        'J':'Ⓙ',
        'K':'Ⓚ',
        'L':'Ⓛ',
        'M':'Ⓜ',
        'N':'Ⓝ',
        'O':'Ⓞ',
        'P':'Ⓟ',
        'Q':'Ⓠ',
        'R':'Ⓡ',
        'S':'Ⓢ',
        'T':'Ⓣ',
        'U':'Ⓤ',
        'V':'Ⓥ',
        'W':'Ⓦ',
        'X':'Ⓧ',
        'Y':'Ⓨ',
        'Z':'Ⓩ'
    },
    "monospace": {
        'a':'𝚊',
        'b':'𝚋',
        'c':'𝚌',
        'd':'𝚍',
        'e':'𝚎',
        'f':'𝚏',
        'g':'𝚐',
        'h':'𝚑',
        'i':'𝚒',
        'j':'𝚓',
        'k':'𝚔',
        'l':'𝚕',
        'm':'𝚖',
        'n':'𝚗',
        'o':'𝚘',
        'p':'𝚙',
        'q':'𝚚',
        'r':'𝚛',
        's':'𝚜',
        't':'𝚝',
        'u':'𝚞',
        'v':'𝚟',
        'w':'𝚠',
        'x':'𝚡',
        'y':'𝚢',
        'z':'𝚣',
        'A':'𝙰',
        'B':'𝙱',
        'C':'𝙲',
        'D':'𝙳',
        'E':'𝙴',
        'F':'𝙵',
        'G':'𝙶',
        'H':'𝙷',
        'I':'𝙸',
        'J':'𝙹',
        'K':'𝙺',
        'L':'𝙻',
        'M':'𝙼',
        'N':'𝙽',
        'O':'𝙾',
        'P':'𝙿',
        'Q':'𝚀',
        'R':'𝚁',
        'S':'𝚂',
        'T':'𝚃',
        'U':'𝚄',
        'V':'𝚅',
        'W':'𝚆',
        'X':'𝚇',
        'Y':'𝚈',
        'Z':'𝚉'
    },
    "canadian": {
        'a':'ᗩ',
        'b':'ᗷ',
        'c':'ᑕ',
        'd':'ᗪ',
        'e':'E',
        'f':'ᖴ',
        'g':'G',
        'h':'ᕼ',
        'i':'I',
        'j':'ᒍ',
        'k':'K',
        'l':'ᒪ',
        'm':'ᗰ',
        'n':'ᑎ',
        'o':'O',
        'p':'ᑭ',
        'q':'Q',
        'r':'ᖇ',
        's':'S',
        't':'T',
        'u':'ᑌ',
        'v':'ᐯ',
        'w':'ᗯ',
        'x':'᙭',
        'y':'Y',
        'z':'Z',
        'A':'ᗩ',
        'B':'ᗷ',
        'C':'ᑕ',
        'D':'ᗪ',
        'E':'E',
        'F':'ᖴ',
        'G':'G',
        'H':'ᕼ',
        'I':'I',
        'J':'ᒍ',
        'K':'K',
        'L':'ᒪ',
        'M':'ᗰ',
        'N':'ᑎ',
        'O':'O',
        'P':'ᑭ',
        'Q':'Q',
        'R':'ᖇ',
        'S':'S',
        'T':'T',
        'U':'ᑌ',
        'V':'ᐯ',
        'W':'ᗯ',
        'X':'᙭',
        'Y':'Y',
        'Z':'Z'
    },
    "fraktur": {
        'a':'𝖆',
        'b':'𝖇',
        'c':'𝖈',
        'd':'𝖉',
        'e':'𝖊',
        'f':'𝖋',
        'g':'𝖌',
        'h':'𝖍',
        'i':'𝖎',
        'j':'𝖏',
        'k':'𝖐',
        'l':'𝖑',
        'm':'𝖒',
        'n':'𝖓',
        'o':'𝖔',
        'p':'𝖕',
        'q':'𝖖',
        'r':'𝖗',
        's':'𝖘',
        't':'𝖙',
        'u':'𝖚',
        'v':'𝖛',
        'w':'𝖜',
        'x':'𝖝',
        'y':'𝖞',
        'z':'𝖟',
        'A':'𝕬',
        'B':'𝕭',
        'C':'𝕮',
        'D':'𝕯',
        'E':'𝕰',
        'F':'𝕱',
        'G':'𝕲',
        'H':'𝕳',
        'I':'𝕴',
        'J':'𝕵',
        'K':'𝕶',
        'L':'𝕷',
        'M':'𝕸',
        'N':'𝕹',
        'O':'𝕺',
        'P':'𝕻',
        'Q':'𝕼',
        'R':'𝕽',
        'S':'𝕾',
        'T':'𝕿',
        'U':'𝖀',
        'V':'𝖁',
        'W':'𝖂',
        'X':'𝖃',
        'Y':'𝖄',
        'Z':'𝖅'
    },
    "modifier": {
        'a':'ᵃ',
        'b':'ᵇ',
        'c':'ᶜ',
        'd':'ᵈ',
        'e':'ᵉ',
        'f':'ᶠ',
        'g':'ᵍ',
        'h':'ʰ',
        'i':'ⁱ',
        'j':'ʲ',
        'k':'ᵏ',
        'l':'ˡ',
        'm':'ᵐ',
        'n':'ⁿ',
        'o':'ᵒ',
        'p':'ᵖ',
        'q':'q',
        'r':'ʳ',
        's':'ˢ',
        't':'ᵗ',
        'u':'ᵘ',
        'v':'ᵛ',
        'w':'ʷ',
        'x':'ˣ',
        'y':'ʸ',
        'z':'ᶻ',
        'A':'ᴬ',
        'B':'ᴮ',
        'C':'ᶜ',
        'D':'ᴰ',
        'E':'ᴱ',
        'F':'ᶠ',
        'G':'ᴳ',
        'H':'ᴴ',
        'I':'ᴵ',
        'J':'ᴶ',
        'K':'ᴷ',
        'L':'ᴸ',
        'M':'ᴹ',
        'N':'ᴺ',
        'O':'ᴼ',
        'P':'ᴾ',
        'Q':'Q',
        'R':'ᴿ',
        'S':'ˢ',
        'T':'ᵀ',
        'U':'ᵁ',
        'V':'ⱽ',
        'W':'ᵂ',
        'X':'ˣ',
        'Y':'ʸ',
        'Z':'ᶻ'
    },
    "subscript": {
        'a':'ₐ',
        'b':'b',
        'c':'c',
        'd':'d',
        'e':'ₑ',
        'f':'f',
        'g':'g',
        'h':'ₕ',
        'i':'ᵢ',
        'j':'ⱼ',
        'k':'ₖ',
        'l':'ₗ',
        'm':'ₘ',
        'n':'ₙ',
        'o':'ₒ',
        'p':'ₚ',
        'q':'q',
        'r':'ᵣ',
        's':'ₛ',
        't':'ₜ',
        'u':'ᵤ',
        'v':'ᵥ',
        'w':'w',
        'x':'ₓ',
        'y':'y',
        'z':'z',
        'A':'ₐ',
        'B':'B',
        'C':'C',
        'D':'D',
        'E':'ₑ',
        'F':'F',
        'G':'G',
        'H':'ₕ',
        'I':'ᵢ',
        'J':'ⱼ',
        'K':'ₖ',
        'L':'ₗ',
        'M':'ₘ',
        'N':'ₙ',
        'O':'ₒ',
        'P':'ₚ',
        'Q':'Q',
        'R':'ᵣ',
        'S':'ₛ',
        'T':'ₜ',
        'U':'ᵤ',
        'V':'ᵥ',
        'W':'W',
        'X':'ₓ',
        'Y':'Y',
        'Z':'Z'
    },
    "italic": {
        'a':'𝘢','b':'𝘣','c':'𝘤','d':'𝘥','e':'𝘦','f':'𝘧','g':'𝘨','h':'𝘩','i':'𝘪',
        'j':'𝘫','k':'𝘬','l':'𝘭','m':'𝘮','n':'𝘯','o':'𝘰','p':'𝘱','q':'𝘲','r':'𝘳',
        's':'𝘴','t':'𝘵','u':'𝘶','v':'𝘷','w':'𝘸','x':'𝘹','y':'𝘺','z':'𝘻',
        'A':'𝘈','B':'𝘉','C':'𝘊','D':'𝘋','E':'𝘌','F':'𝘍','G':'𝘎','H':'𝘏','I':'𝘐',
        'J':'𝘑','K':'𝘒','L':'𝘓','M':'𝘔','N':'𝘕','O':'𝘖','P':'𝘗','Q':'𝘘','R':'𝘙',
        'S':'𝘚','T':'𝘛','U':'𝘜','V':'𝘝','W':'𝘞','X':'𝘟','Y':'𝘠','Z':'𝘡'
    },

    "double": {
        'a':'𝕒','b':'𝕓','c':'𝕔','d':'𝕕','e':'𝕖','f':'𝕗','g':'𝕘','h':'𝕙','i':'𝕚',
        'j':'𝕛','k':'𝕜','l':'𝕝','m':'𝕞','n':'𝕟','o':'𝕠','p':'𝕡','q':'𝕢','r':'𝕣',
        's':'𝕤','t':'𝕥','u':'𝕦','v':'𝕧','w':'𝕨','x':'𝕩','y':'𝕪','z':'𝕫',
        'A':'𝔸','B':'𝔹','C':'ℂ','D':'𝔻','E':'𝔼','F':'𝔽','G':'𝔾','H':'ℍ','I':'𝕀',
        'J':'𝕁','K':'𝕂','L':'𝕃','M':'𝕄','N':'ℕ','O':'𝕆','P':'ℙ','Q':'ℚ','R':'ℝ',
        'S':'𝕊','T':'𝕋','U':'𝕌','V':'𝕍','W':'𝕎','X':'𝕏','Y':'𝕐','Z':'ℤ'
        },
    "bypass": {
        'a':'а','b':'b','c':'с','d':'ԁ','e':'е','f':'f','g':'ց','h':'հ','i':'і','j':'ј','k':'k','l':'ӏ','m':'m','n':'ո','o':'օ','p':'р','q':'q','r':'r','s':'ѕ','t':'t','u':'ս','v':'v','w':'ᴡ','x':'х','y':'у','z':'ⴭ','A':'А','B':'В','C':'Ϲ','D':'𝖣','E':'Е','F':'𝖥','G':'Ԍ','H':'Η','I':'𐌠','J':'Ј','K':'K','L':'𝖫','M':'𝖬','N':'𝖭','O':'Օ','P':'Р','Q':'Q','R':'𝖱','S':'Տ','T':'Т','U':'Ս','V':'𝖵','W':'Ԝ','X':'Χ','Y':'Υ','Z':'Ⴭ'
        },
    "normal": {
        'a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g','h':'h','i':'i',
        'j':'j','k':'k','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r',
        's':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z',
        'A':'A','B':'B','C':'C','D':'D','E':'E','F':'F','G':'G','H':'H','I':'I',
        'J':'J','K':'K','L':'L','M':'M','N':'N','O':'O','P':'P','Q':'Q','R':'R',
        'S':'S','T':'T','U':'U','V':'V','W':'W','X':'X','Y':'Y','Z':'Z'
       },
     "smallcaps": {
        'a':'ᴀ','b':'ʙ','c':'ᴄ','d':'ᴅ','e':'ᴇ','f':'ꜰ','g':'ɢ','h':'ʜ','i':'ɪ',
        'j':'ᴊ','k':'ᴋ','l':'ʟ','m':'ᴍ','n':'ɴ','o':'ᴏ','p':'ᴘ','q':'ǫ','r':'ʀ',
        's':'ꜱ','t':'ᴛ','u':'ᴜ','v':'ᴠ','w':'ᴡ','x':'x','y':'ʏ','z':'ᴢ',
        'A':'ᴀ','B':'ʙ','C':'ᴄ','D':'ᴅ','E':'ᴇ','F':'ꜰ','G':'ɢ','H':'ʜ','I':'ɪ',
        'J':'ᴊ','K':'ᴋ','L':'ʟ','M':'ᴍ','N':'ɴ','O':'ᴏ','P':'ᴘ','Q':'ǫ','R':'ʀ',
        'S':'ꜱ','T':'ᴛ','U':'ᴜ','V':'ᴠ','W':'ᴡ','X':'x','Y':'ʏ','Z':'ᴢ'
    }
}

# --------------------------------------------------------------------------- #
# 2.  Pick a set                                                              #
# --------------------------------------------------------------------------- #
def pick_set():
    names = list(MASTER)
    while True:
        print("Sets:", ", ".join(names))
        choice = input("Which set? > ").strip()
        if choice in MASTER:
            return MASTER[choice]
        print("❌  unknown – try again")

# --------------------------------------------------------------------------- #
# 3.  Crash logger                                                            #
# --------------------------------------------------------------------------- #
def log_exc():
    with LOG_FILE.open("a", encoding="utf-8") as f:
        f.write("-" * 60 + "\n")
        f.write(time.strftime("%Y-%m-%d %H:%M:%S") + "\n")
        traceback.print_exc(file=f)

# --------------------------------------------------------------------------- #
# 4.  Clipboard fallback                                                      #
# --------------------------------------------------------------------------- #
try:
    import pyperclip
    def paste_unicode(text):
        pyperclip.copy(text)
        import pynput.keyboard as kb
        kb.Controller().press(kb.Key.ctrl)
        kb.Controller().press('v')
        kb.Controller().release('v')
        kb.Controller().release(kb.Key.ctrl)
except Exception:
    # no clipboard – ignore
    def paste_unicode(text):
        pass
# --------------------------------------------------------------------------- #
# 5.  Main driver  – uses `keyboard` library                                  #
# --------------------------------------------------------------------------- #
def main():
    table  = pick_set()
    active = True
    import keyboard                       # <- new library
    import threading

    def replace_one(char):
        """Inject the replacement character."""
        keyboard.send('backspace')         # remove original letter
        keyboard.write(char)               # send bold/italic/…

    # callback that runs inside keyboard’s hook
    def handler(event):
        nonlocal active
        if keyboard.is_pressed('pause'):   # ON / OFF toggle
            active = not active
            print('active =', active)
            return True                    # let pause through
        if not active or event.is_keypad:
            return True                    # let key through

        c = event.name                     # 'a', 'b', 'shift+a' …
        if len(c) == 1 and c.isascii() and c.isalpha():
            repl = table.get(c)
            if repl:                       # we want to replace
                # do the replacement *after* this callback returns
                threading.Thread(target=replace_one, args=(repl,), daemon=True).start()
                return False               # suppress original
        return True                        # let anything else through

    print('Running – Pause/Break toggles – Ctrl-C quits.')
    keyboard.hook(handler)                 # install low-level hook
    keyboard.wait('ctrl+c')                # keep running till Ctrl-C
    keyboard.unhook_all()
    print('\nBye!')

# --------------------------------------------------------------------------- #
# 6.  Entry point                                                             #
# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nBye!")
    except Exception:
        log_exc()
        print("\n🔥  CRASH – details in", LOG_FILE)
        input("Press Enter to exit…")
